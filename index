<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Leashed App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        // IMPORTANT: You must replace these placeholder values with your actual Firebase project configuration for the app to connect to your database.
        const __firebase_config = `{
            "apiKey": "YOUR_API_KEY",
            "authDomain": "YOUR_PROJECT_ID.firebaseapp.com",
            "projectId": "YOUR_PROJECT_ID",
            "storageBucket": "YOUR_PROJECT_ID.appspot.com",
            "messagingSenderId": "YOUR_SENDER_ID",
            "appId": "YOUR_APP_ID"
        }`;
        const __app_id = "default-app-id";
        const __initial_auth_token = null;

        const { useState, useEffect, useCallback } = React;
        
        // Corrected Firebase imports for this environment
        const { initializeApp } = window.firebase.app;
        const { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } = window.firebase.auth;
        const { getFirestore, doc, addDoc, setDoc, getDoc, deleteDoc, onSnapshot, collection, query, where, getDocs, updateDoc, writeBatch } = window.firebase.firestore;

        // --- Helper Functions & Constants ---
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        const LOGO_URL = "https://storage.googleapis.com/leashed-assets/leashed_logo.png";

        // --- SVG Icons ---
        const CheckIcon = ({ className }) => (
            <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
        );
        const MapPinIcon = ({ className }) => (
            <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
        );
        const NoteIcon = ({ className }) => (
            <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
        );
        const DollarSignIcon = ({ className }) => (
            <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8V3m0 18v-3.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
        );
        const UsersIcon = ({ className }) => (
            <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-3-3H5a3 3 0 00-3 3v2h5m-1-12a4 4 0 11-8 0 4 4 0 018 0zm-1 9a3 3 0 00-3-3H5a3 3 0 00-3 3v2h14v-2a3 3 0 00-3-3z" />
            </svg>
        );

        // --- Utility Functions ---
        const hashPassword = async (password) => {
            if (!password) return null;
            const encoder = new TextEncoder();
            const data = encoder.encode(password);
            const hashBuffer = await crypto.subtle.digest('SHA-256', data);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        };

        // --- UI Components ---
        const CustomModal = ({ children, onClose }) => (
            <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4 transition-opacity duration-300">
                <div className="bg-white p-6 rounded-2xl shadow-2xl w-full max-w-lg relative transform transition-all duration-300 scale-95 animate-modal-in">
                    {children}
                    <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors">
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                    </button>
                </div>
            </div>
        );
        const CustomAlert = ({ message, onClose }) => (
            <CustomModal onClose={onClose}>
                <div className="text-center">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">{message}</h3>
                    <button onClick={onClose} className="w-full px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200">Close</button>
                </div>
            </CustomModal>
        );
        const LoginPage = ({ onLogin, alert }) => {
            const [username, setUsername] = useState('');
            const [password, setPassword] = useState('');
            const [isLoading, setIsLoading] = useState(false);
            const handleLogin = async (e) => {
                e.preventDefault();
                if (!username || !password) {
                    alert("Username and password are required.");
                    return;
                }
                setIsLoading(true);
                await onLogin(username, password);
                setIsLoading(false);
            };
            return (
                <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-100 p-4">
                    <div className="text-center mb-10">
                        <img src={LOGO_URL} alt="Leashed Logo" className="w-48 mx-auto mb-4" />
                        <h1 className="text-4xl font-bold text-gray-800">Welcome to Leashed</h1>
                        <p className="text-gray-500 mt-2">Your trusted partner in pet care.</p>
                    </div>
                    <div className="w-full max-w-sm bg-white p-8 rounded-2xl shadow-xl">
                        <h2 className="text-2xl font-bold text-center text-gray-800 mb-6">Sign In</h2>
                        <form onSubmit={handleLogin} className="space-y-6">
                            <div>
                                <label htmlFor="username" className="block text-sm font-medium text-gray-700">Username</label>
                                <input id="username" type="text" value={username} onChange={(e) => setUsername(e.target.value)} placeholder="your.username" className="mt-1 block w-full px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition" />
                            </div>
                            <div>
                                <label htmlFor="password"className="block text-sm font-medium text-gray-700">Password</label>
                                <input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="••••••••" className="mt-1 block w-full px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition" />
                            </div>
                            <button type="submit" disabled={isLoading} className="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-lg text-md font-semibold text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105">
                                {isLoading ? 'Signing In...' : 'Sign In'}
                            </button>
                        </form>
                    </div>
                </div>
            );
        };
        const UserCreationForm = ({ fields, onAdd, type, alert }) => {
            const [formData, setFormData] = useState({});
            const handleAdd = () => {
                const missingField = fields.find(f => !formData[f.name]);
                if (missingField) {
                    alert(`Please fill out the ${missingField.placeholder} field.`);
                    return;
                }
                onAdd(formData);
                setFormData({});
            };
            return (
                <div className="space-y-4">
                    {fields.map(field => (
                        <input key={field.name} type={field.type} value={formData[field.name] || ''} onChange={e => setFormData({ ...formData, [field.name]: e.target.value })} placeholder={field.placeholder} className="w-full p-3 bg-gray-50 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none transition" />
                    ))}
                    <button onClick={handleAdd} className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold hover:bg-indigo-700 transition-all duration-200 shadow-md hover:shadow-lg">Create {type}</button>
                </div>
            );
        };
        const MiniCFOPage = ({ db, alert }) => {
            const [metrics, setMetrics] = useState({ totalClients: 0, activeWalkers: 0, weeklyBillableHours: 0, monthlyRevenue: 0, monthlyExpenses: 0, clientAcquisitionCost: 0, businessValuation: 0, areasForImprovement: '' });
            const [loadingMetrics, setLoadingMetrics] = useState(true);
            useEffect(() => {
                if (!db) return;
                const docRef = doc(db, `artifacts/${appId}/public/data/businessMetrics`, 'currentMetrics');
                const unsub = onSnapshot(docRef, (docSnap) => {
                    if (docSnap.exists()) { setMetrics(docSnap.data()); } else { setMetrics({ totalClients: 0, activeWalkers: 0, weeklyBillableHours: 0, monthlyRevenue: 0, monthlyExpenses: 0, clientAcquisitionCost: 0, businessValuation: 0, areasForImprovement: '' }); }
                    setLoadingMetrics(false);
                }, (error) => {
                    console.error("Error fetching business metrics:", error);
                    alert("Failed to load business metrics. Please try again.");
                    setLoadingMetrics(false);
                });
                return () => unsub();
            }, [db, alert]);
            const handleMetricChange = (e) => {
                const { name, value, type } = e.target;
                setMetrics(prev => ({ ...prev, [name]: type === 'number' ? parseFloat(value) || 0 : value }));
            };
            const handleSaveMetrics = async () => {
                if (!db) { alert("Database not connected."); return; }
                setLoadingMetrics(true);
                try {
                    const docRef = doc(db, `artifacts/${appId}/public/data/businessMetrics`, 'currentMetrics');
                    await setDoc(docRef, metrics, { merge: true });
                    alert("Business metrics saved successfully!");
                } catch (error) {
                    console.error("Error saving business metrics:", error);
                    alert("Failed to save business metrics. Please try again.");
                } finally { setLoadingMetrics(false); }
            };
            if (loadingMetrics) { return <div className="flex items-center justify-center h-64"><div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div></div>; }
            return (
                <div className="bg-white p-6 rounded-xl shadow-lg space-y-6">
                    <h3 className="text-2xl font-bold text-gray-800 mb-4">Mini CFO Dashboard</h3>
                    {/* ... rest of MiniCFOPage JSX ... */}
                </div>
            );
        };
        const AdminDashboard = ({ db, alert, onSchedule }) => {
             const [activeTab, setActiveTab] = useState('schedule');
            // ... Logic for AdminDashboard ...
            return <div>Admin Dashboard Content</div>; // Placeholder
        };
        const ClientDashboard = ({ db, currentUser, alert, onSchedule }) => {
            // ... Logic for ClientDashboard ...
            return <div>Client Dashboard Content</div>; // Placeholder
        };
        const WalkerDashboard = ({ db, currentUser, alert }) => {
            // ... Logic for WalkerDashboard ...
            return <div>Walker Dashboard Content</div>; // Placeholder
        };

        // --- Main Application ---
        function App() {
            const [db, setDb] = useState(null);
            const [isAuthReady, setIsAuthReady] = useState(false);
            const [loading, setLoading] = useState(true);
            const [currentUser, setCurrentUser] = useState(null);
            const [alertContent, setAlertContent] = useState(null);
            
            const alert = (message) => setAlertContent(message);
            
            useEffect(() => {
                try {
                    const app = initializeApp(firebaseConfig);
                    const firestore = getFirestore(app);
                    setDb(firestore);
                    const auth = getAuth(app);
                    onAuthStateChanged(auth, async (user) => {
                        if (!user) {
                            try {
                                initialAuthToken ? await signInWithCustomToken(auth, initialAuthToken) : await signInAnonymously(auth);
                            } catch (error) { 
                                console.error("Anonymous Auth failed:", error); 
                                setLoading(false); 
                                return;
                            }
                        }
                        setIsAuthReady(true);
                        setLoading(false);
                    });
                } catch (error) { 
                    console.error("Firebase init failed:", error); 
                    setLoading(false); 
                }
            }, []);

            const handleLogin = async (username, password) => {
                if (!db) return alert("Database not connected.");
                const normalizedUsername = username.toLowerCase();
                if (normalizedUsername === 'admin' && password === 'r5JQEIDVLSEvSIkuIbjv') {
                    const adminDocRef = doc(db, `artifacts/${appId}/public/data/admins`, 'admin');
                    const adminDoc = await getDoc(adminDocRef);
                    if (!adminDoc.exists()) {
                        const hashedPassword = await hashPassword('r5JQEIDVLSEvSIkuIbjv');
                        await setDoc(adminDocRef, { username: 'admin', passwordHash: hashedPassword });
                        alert("Primary admin account created. Please log in again with 'admin' and the default password.");
                        return;
                    }
                    setCurrentUser({ id: 'admin', name: 'Admin', username: 'admin', role: 'admin' });
                    return;
                }
                for (const type of ['admins', 'walkers', 'clients']) {
                    const q = query(collection(db, `artifacts/${appId}/public/data/${type}`), where("username", "==", normalizedUsername));
                    const querySnapshot = await getDocs(q);
                    if (!querySnapshot.empty) {
                        const userDoc = querySnapshot.docs[0];
                        const userData = userDoc.data();
                        if (await hashPassword(password) === userData.passwordHash) {
                            setCurrentUser({ id: userDoc.id, name: userData.name || userData.username, username: userData.username, role: type.slice(0, -1) });
                            return;
                        }
                    }
                }
                alert("Invalid username or password.");
            };

            const handleLogout = () => setCurrentUser(null);
            
            const handleSchedule = async (scheduleData) => {
                // ... handleSchedule logic ...
                alert("Service successfully scheduled!");
            };

            const renderDashboard = () => {
                if (isAuthReady && currentUser) {
                    switch (currentUser.role) {
                        case 'admin': return <AdminDashboard db={db} alert={alert} onSchedule={handleSchedule} />;
                        case 'walker': return <WalkerDashboard db={db} currentUser={currentUser} alert={alert} />;
                        case 'client': return <ClientDashboard db={db} currentUser={currentUser} alert={alert} onSchedule={handleSchedule} />;
                        default: return <LoginPage onLogin={handleLogin} alert={alert} />;
                    }
                }
                return <LoginPage onLogin={handleLogin} alert={alert} />;
            };

            if (loading || !isAuthReady) return <div className="flex items-center justify-center h-screen bg-gray-100"><div className="animate-spin rounded-full h-24 w-24 border-t-4 border-b-4 border-indigo-600"></div></div>;
            
            if (!currentUser) return <LoginPage onLogin={handleLogin} alert={alert} />;

            return (
                <div className="min-h-screen bg-gray-100 font-sans">
                    {alertContent && <CustomAlert message={alertContent} onClose={() => setAlertContent(null)} />}
                    <header className="bg-white shadow-md sticky top-0 z-40">
                       {/* ... Header JSX ... */}
                    </header>
                    <main>
                        <div className="max-w-screen-xl mx-auto py-8 sm:px-6 lg:px-8">
                            {renderDashboard()}
                        </div>
                    </main>
                </div>
            );
        };
        
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);

    </script>
</body>
</html>
