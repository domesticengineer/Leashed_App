<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pet Advocate Portal</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f3f4f6;
      margin: 0;
      padding: 0;
      min-height: 100vh;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    .card {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      padding: 20px;
      margin-bottom: 20px;
    }
    h1, h2 {
      color: #1f2937;
    }
    .btn {
      padding: 10px 20px;
      border-radius: 6px;
      cursor: pointer;
      border: none;
      font-size: 16px;
    }
    .btn-blue {
      background: #3b82f6;
      color: white;
    }
    .btn-blue:hover {
      background: #2563eb;
    }
    .btn-red {
      background: #ef4444;
      color: white;
    }
    .btn-red:hover {
      background: #dc2626;
    }
    .btn-green {
      background: #10b981;
      color: white;
    }
    .btn-green:hover {
      background: #059669;
    }
    input, select, textarea {
      width: 100%;
      padding: 10px;
      margin: 8px 0;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      box-sizing: border-box;
    }
    .error {
      color: #ef4444;
      font-size: 14px;
    }
    .flex-between {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .grid-2 {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
    }
    ul {
      list-style: none;
      padding: 0;
    }
    li {
      padding: 10px 0;
      border-bottom: 1px solid #e5e7eb;
    }
    @media (max-width: 768px) {
      .grid-2 {
        grid-template-columns: 1fr;
      }
    }
    .hidden {
      display: none;
    }
  </style>
</head>
<body>
  <div id="login" class="container">
    <div class="card">
      <h1>Pet Advocate Portal Login</h1>
      <div id="login-error" class="error hidden"></div>
      <div>
        <label for="username">Username</label>
        <input id="username" type="text" placeholder="Enter username" required>
      </div>
      <div>
        <label for="password">Password</label>
        <input id="password" type="password" placeholder="Enter password" required>
      </div>
      <button class="btn btn-blue" onclick="handleLogin()">Login</button>
    </div>
  </div>
  <div id="admin" class="container hidden">
    <div class="flex-between">
      <h1>Admin Dashboard</h1>
      <button class="btn btn-red" onclick="handleLogout()">Logout</button>
    </div>
    <div class="grid-2">
      <div class="card">
        <h2>Create New Pet Advocate</h2>
        <div>
          <label for="new-firstname">First Name</label>
          <input id="new-firstname" type="text" placeholder="First Name" required>
        </div>
        <div>
          <label for="new-lastname">Last Name</label>
          <input id="new-lastname" type="text" placeholder="Last Name" required>
        </div>
        <div>
          <label for="new-username">Username</label>
          <input id="new-username" type="text" placeholder="Username" required>
        </div>
        <div>
          <label for="new-password">Password</label>
          <input id="new-password" type="password" placeholder="Password" required>
        </div>
        <button class="btn btn-blue" onclick="createPetAdvocate()">Create Pet Advocate</button>
      </div>
      <div class="card">
        <h2>Assign Service</h2>
        <div>
          <label for="service-advocate">Pet Advocate</label>
          <select id="service-advocate" required>
            <option value="">Select Pet Advocate</option>
          </select>
        </div>
        <div>
          <label for="pet">Pet Name</label>
          <input id="pet" type="text" placeholder="Pet Name" required>
        </div>
        <div>
          <label for="service-type">Service Type</label>
          <select id="service-type" required>
            <option value="walk">Walk</option>
            <option value="grooming">Grooming</option>
            <option value="sitting">Pet Sitting</option>
          </select>
        </div>
        <div>
          <label for="service-date">Date</label>
          <input id="service-date" type="date" required>
        </div>
        <div>
          <label for="service-time">Time</label>
          <input id="service-time" type="time" required>
        </div>
        <button class="submit-report button" onclick="assignService()">Assign Service</button>
      </div>
    </div>
    <div class="card">
      <h2>Service Reports</h2>
      <ul id="admin-reports"></ul>
    </div>
  </div>
  <div id="advocate" class="container hidden">
    <div class="flex-between">
      <h1>Pet Advocate Dashboard</h1>
      <button class="btn btn-red" onclick="handleLogout()">Logout</button>
    </div>
    <div class="card">
      <h2>Your Services</h2>
      <ul id="advocate-services"></ul>
    </div>
    <div class="card">
      <h2>Your Reports</h2>
      <ul id="advocate-reports"></ul>
    </div>
  </div>
  <script>
    // Initialize data
    function initializeData() {
      const defaultData = {
        users: [
          id: "admin1",
          firstName: "Admin",
          lastName: "User",
          username: "admin",
          password: btoa("admin123"),
          role: "admin",
        ],
        {
          id: "adv1",
          firstName: "John",
          lastName: "Doe",
          username: "john",
          password: btoa("pass123"),
          role: "advocate",
        ],
        services: [
          {
            id: "svc1",
            userId: "adv1",
            pet: "Buddy",
            serviceType: "walk",
            dueDate: "2025-01-15",
            time: "10:00",
            status: "scheduled",
          ],
        reports: [],
      };
      if (!localStorage.getItem("advocateData")) {
        localStorage.setItem("advocateData", JSON.stringify(defaultData));
      }
    }

    // Data access
    function getData() {
      return JSON.parse(localStorage.getItem("advocateData") || "{}");
    }

    function saveData(data) {
      localStorage.setItem("advocateData", JSON.stringify(data));
    }

    // Current user
    let currentUser = null;

    // Show/hide sections
    function showSection(sectionId) {
      ["login", "admin", "advocate"].forEach((id) => {
        document.getElementById(id).classList.toggle("hidden", id !== sectionId);
      });
    }

    // Login
    function handleLogin() {
      const username = document.getElementById("username").value;
      const password = document.getElementById("password").value;
      const data = getData();
      const user = data.users.find(
        (u) =>
          u.username.toLowerCase() === username.toLowerCase() &&
          u.password === btoa(password)
      );
      if (user) {
        currentUser = user;
        document.getElementById("login-error").classList.add("hidden");
        document.getElementById("username").value = "";
        document.getElementById("password").value = "";
        if (user.role === "admin") {
          showSection("admin");
          renderAdmin();
        } else {
          showSection("advocate");
          renderAdvocate();
        }
      } else {
        document.getElementById("login-error").textContent =
          "Invalid username or password";
        document.getElementById("login-error").classList.remove("hidden");
      }
    }

    // Logout
    function handleLogout() {
      currentUser = null;
      showSection("login");
    }

    // Create Pet Advocate
    function createPetAdvocate() {
      const firstName = document.getElementById("new-firstname").value;
      const lastName = document.getElementById("new-lastname").value;
      const username = document.getElementById("new-username").value;
      const password = document.getElementById("new-password").value;

      const data = getData();

      if (
        data.users.some(
          (u) => u.username.toLowerCase() === username.toLowerCase()
        )
      ) {
        alert("Username already exists");
        return;
      }

      data.users.push({
        id: `user${data.users.length + 1}`,
        firstName,
        lastName,
        username,
        password: btoa(password),
        role: "advocate",
      });

      saveData(data);
      document.getElementById("new-firstname").value = "";
      document.getElementById("new-lastname").value = "";
      document.getElementById("new-username").value = "";
      document.getElementById("new-password").value = "";
      alert("Pet Advocate created successfully");
      renderAdmin();
    }

    // Assign Service
    function assignService() {
      const userId = document.getElementById("service-advocate").value;
      const pet = document.getElementById("pet").value;
      const serviceType = document.getElementById("service-type").value;
      const dueDate = document.getElementById("service-date").value;
      const time = document.getElementById("service-time").value;

      const data = getData();

      data.services.push({
        id: `svc${data.services.length + 1}`,
        userId,
        pet,
        serviceType,
        dueDate,
        time,
        status: "scheduled",
      });

      saveData(data);
      document.getElementById("service-advocate").value = "";
      document.getElementById("pet").value = "";
      document.getElementById("service-type").value = "";
      document.getElementById("service-date").value = "";
      document.getElementById("service-time").value = "";
      alert("Service assigned successfully");
      renderAdmin();
    }

    // Submit Service Report
    function submitServiceReport(serviceId, notes) {
      const data = getData();
      const service = data.services.find((s) => s.id === serviceId);
      const timestamp = new Date().toISOString();

      data.reports.push({
        id: `rep${data.reports.length + 1}`,
        serviceId,
        text: `Pet Advocate ${currentUser.firstName} ${currentUser.lastName} completed ${service.serviceType} for ${service.pet}: ${notes}`,
        timestamp,
      });

      service.status = "completed";
      saveData(data);
      alert("Report submitted successfully");
      renderAdvocate();
    }

    // Render Admin Dashboard
    function renderAdmin() {
      const data = getData();

      // Update Pet Advocate dropdown
      const advocateSelect = document.getElementById("service-advocate");
      advocateSelect.innerHTML = '<option value="">Select Pet Advocate</option>';
      data.users
        .filter((u) => u.role === "advocate")
        .forEach((u) => {
          advocateSelect.innerHTML += `<option value="${u.id}">${u.firstName} ${u.lastName} (${u.username})</option>`;
        });

      // Update reports
      const reportsList = document.getElementById("admin-reports");
      reportsList.innerHTML = "";
      data.reports.forEach((r) => {
        reportsList.innerHTML += `<li>${r.text} (Time: ${r.timestamp})</li>`;
      });
    }

    // Render Pet Advocate Dashboard
    function renderAdvocate() {
      const data = getData();
      const servicesList = document.getElementById("advocate-services");
      const reportsList = document.getElementById("advocate-reports");
      servicesList.innerHTML = "";
      reportsList.innerHTML = "";

      const services = data.services.filter(
        (s) => s.userId === currentUser.id
      );
      services.forEach((s) => {
        let actions = "";
        if (s.status === "scheduled") {
          actions = `
            <textarea id="notes-${s.id}" placeholder="Enter service notes"></textarea>
            <button class="btn btn-green" onclick="submitServiceReport('${
              s.id
            }', document.getElementById('notes-${s.id}').value)">Submit Report</button>
          `;
        }
        servicesList.innerHTML += `
          <li class="flex-between">
            <span>Pet: ${s.pet}, Service: ${s.serviceType}, Date: ${
              s.dueDate
            }, Time: ${s.time}, Status: ${s.status}</span>
            <div>${actions}</div>
          </li>
        `;
      });

      data.reports
        .filter((r) => services.some((s) => s.id === r.serviceId))
        .forEach((r) => {
          reportsList.innerHTML += `<li>${r.text} (Time: ${r.timestamp})</li>`;
        });
    }

    // Initialize
    initializeData();
    showSection("login");
  </script>
</body>
</html>
